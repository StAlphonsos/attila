#!/usr/bin/perl
##
# filename.pl - purpose
#
# Time-stamp: <2014-04-23 14:54:36 attila@stalphonsos.com>
#
# Coyright (C) 1999-2007 by Sean Levy <snl@cluefactory.com>
# All Rights Reserved.
#
# See the POD at EOF for docs, or invoke with -help -verbose
##
use strict;
use warnings;
use Pod::Usage;
use vars qw($P $COPY_YEARS $VERBOSE $DEFAULTS $VERSION);

BEGIN {
    ($P) = reverse(split('/', $0)); # XXX File::Spec would be better
    my $yyyy = 1900+(localtime(time))[5];
    $COPY_YEARS = sprintf(($yyyy == 2007) ? q{%d} : q{%d-%d}, 2007, $yyyy);
    $VERBOSE = 0;
    $DEFAULTS = {
    };
    $VERSION = '0.1.0';
}

## qchomp - trim leading and trailing whitespace and deal with quoted strings
##
sub qchomp {
    my $str = shift(@_);
    while ($str =~ /^\s*([\"\'])(.*)\1\s*$/) {
        $str = $2;
    }
    $str =~ s/^\s+//;
    $str =~ s/\s+$//;
    return $str;
}

## usage - dump a usage message and die
##
sub usage {
    my($msg) = @_;
    pod2usage(-verbose => 2)            if $::VERBOSE && !defined($msg);
    if (defined($msg)) {
        print STDERR "$::P: $msg\n"     if defined $msg;
    } else {
        print STDERR "$::P: edit/restore /etc/resolv.conf for OpenVPN\n";
    }
    print STDERR "usage: $::P [-options] [args]\n";
    print STDERR "       Standard options:\n";
    print STDERR "          -v|verbose      increment verbosity level\n";
    print STDERR "          -V|verbosity=n  set verbosity level to n\n\n";
    print STDERR "          -help           print this brief message\n";
    print STDERR "       To see the full documentation, try:\n\n";
    print STDERR "           \$ $::P -help -verbose\n";
    exit(defined($msg)? 1:0);
}

## parse_argv - simplistic and effective CLA parser
##
sub parse_argv {
    my $args;
    if (@_ && (ref($_[0]) eq 'HASH')) {
        $args = shift(@_);
    } else {
        $args = {};
    }
    my @argv = @_;
    foreach my $arg (@argv) {
        $arg =~ s/^\s+//;
        $arg =~ s/\s+$//;
        next unless length $arg;
        if ($arg =~ /^(-{1,2}[^=]+?)[=](.*)$/) {
            my($k,$v) = ($1,qchomp($2));
            $k =~ s/^-+//;
            if ($k ne '_') {
                if (!exists($args->{$k}) ||
                    (ref($args->{$k}) !~ /^(ARRAY|HASH)$/)) {
                    $args->{$k} = $v;
                } elsif (ref($args->{$k}) eq 'HASH') {
                    my($kk,$vv) = split(/:/,$v,2);
                    $args->{$k}->{$kk} = $vv;
                } else {
                    push(@{$args->{$k}}, $v);
                }
            } else {
                $args->{$k} = [] unless defined $args->{$k};
                push(@{$args->{$k}}, $v);
            }
        } elsif ($arg =~ /^(-{1,2}.*)$/) {
            my $k = qchomp($1);
            $k =~ s/^-+//;
            if ($k ne '_') {
                ++$args->{$k};
            } else {
                usage(qq{Cannot have an option named underscore});
            }
        } else {
            $args->{'_'} = [] unless defined $args->{'_'};
            push(@{$args->{'_'}}, $arg);
        }
    }
    $args->{'verbose'} = $args->{'v'}
        if (defined($args->{'v'}) && !defined($args->{'verbose'}));
    $::VERBOSE = $args->{'verbose'};
    return $args;
}

##

sub spew {
    my($args,$msg) = @_;
    return unless $::VERBOSE;
    warn("# $msg\n");
}

sub trailn { return ("@_" =~ /^.*_(\d+)$/)? int($1): undef; }

sub path_to {
    my($args,$name) = @_;
    my($nm) = reverse(split(/\//,$name));
    $nm =~ s/\./-/gs;
    $name = $args->{$nm} if defined($args->{$nm});
    spew($args,"$nm: $name");
    return $name;
}

sub resolv_conf_path { return path_to(shift(@_),'/etc/resolv.conf'); }
sub resolv_conf_backup_path { return path_to(shift(@_),'/tmp/resolv.conf.b'); }

sub write_file {
    my($args,$fn,@lines) = @_;
    if ($args->{'n'}) {
        spew($args,"NOT writing file: $fn");
        return;
    }
    spew($args,"writing file: $fn");
    open(OUT, "> $fn") || die("$fn: $!\n");
    foreach my $line (@lines) {
        print OUT "$line\n";
    }
    close(OUT);
}

sub load_file {
    my($args,$fn) = @_;
    spew($args,"loading file: $fn");
    open(IN,$fn) || die("$fn: $!\n");
    my @lines = ();
    while (defined(my $line = <IN>)) {
        chomp($line);
        push(@lines,$line);
    }
    close(IN);
    return @lines;
}

sub up {
    my($args) = @_;
    my %opts = (
        map { $_ => $ENV{$_} } grep { /^foreign_option_\d+$/ } keys(%ENV)
    );
    my @nameservers;
    my @search;
    foreach my $opt (sort { trailn($a) <=> trailn($b) } keys(%opts)) {
        my $val = $opts{$opt};
        my($otype,@params) = split(/\s+/,$val);
        if ($otype eq 'dhcp-option') {
            my($what,@arg) = @params;
            if ($what eq 'DNS') {
                push(@nameservers,@arg);
            } elsif ($what eq 'DOMAIN') {
                push(@search,@arg);
            } else {
                warn("unrecognized dhcp-option: \"$what\" (@arg)\n");
            }
        } else {
            warn("unrecognized $opt: \"$otype\" (@params)\n");
        }
    }
    if (!@nameservers && !@search) {
        warn("no resolv.conf-related foreign options from OpenVPN\n");
    } else {
        my $fn = resolv_conf_path($args);
        my @conf = load_file($args,$fn);
        spew($args,"loaded $fn: ".scalar(@conf)." lines");
        my $bfn = resolv_conf_backup_path($args);
        write_file($args,$bfn,@conf);
        unshift(@conf,"nameserver $_") foreach (@nameservers);
        unshift(@conf,"search $_") foreach (@search);
        spew($args,"modified conf: @conf");
        write_file($args,$fn,@conf);
    }
}

sub down {
    my($args) = @_;
    my $bfn = resolv_conf_backup_path($args);
    my $fn = resolv_conf_path($args);
    if (-f $bfn) {
        my @bak = load_file($args,$bfn);
        write_file($args,$fn,@bak);
        unlink($bfn);
    }
}

MAIN: {
    my $args = parse_argv({'_' => []}, @ARGV);
    usage() if $args->{'help'};
    my $script_type = $ENV{'script_type'};
    if (!$script_type) {
        ($script_type) = @{$args->{'_'}};
    }
    if (!$script_type) {
        $script_type = '';
    }
    if ($script_type eq 'up') {
        up($args);
    } elsif ($script_type eq 'down') {
        down($args);
    } else {
        usage("unknown script_type: \"$script_type\"");
    }
    exit(0);
}

__END__

=pod

program - purpose

=head1 SYNOPSIS

  # clever comment
  $ example command

=head1 DESCRIPTION

This program does it all.

=head1 OPTIONS

We accept the following optionology:

=over 4

=item -verbose (or -v)

=item -verbosity=int (or -V=int)

The first form increments the verbosity level every time it is seen.
The second form sets the verbosity level to the integer specified.
Higher verbosity levels mean more output.

=item -quiet

Be quiet about everything but errors.

=item -help

Print a short usage message.  If you specify -verbose, you get this
man page.

=item -version

Print our version

=back

=head1 VERSION HISTORY

B<Alice>: Well I must say I've never heard it that way before...

B<Caterpillar>: I know, I have improved it. 

Z<>

  0.1.0   16 Feb 07     snl     Started

=cut

##
# Local variables:
# mode: perl
# tab-width: 4
# perl-indent-level: 4
# perl-continued-statement-offset: 4
# indent-tabs-mode: nil
# comment-column: 40
# End:
##

