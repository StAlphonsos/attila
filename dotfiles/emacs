;; -*- mode:emacs-lisp; indent-tabs-mode:nil; tab-width: 2 -*-
;;
;; attila's EMACS configuration
;;
;; Time-stamp: <2014-12-26 18:33:24 attila@stalphonsos.com>
;; $Id: dot.emacs,v 1.1 2006/07/13 17:56:28 attila Exp $
;;

;;;
;; Path bashing functions
;;
;; These are the only things I really need to leave in .emacs, other than
;; a few random mode settings.  Any substantial code should go elsewhere
;; and get required or loaded here.
;;;
(defun load-path-prepend (dir)
  "Prepend dir to load-path after running it through expand-file-name"
  (setq load-path (append (list (expand-file-name dir)) load-path)))
(defun load-path-append (dir)
  "Append dir to load-path after running it through expand-file-name"
  (setq load-path (append load-path (list (expand-file-name dir)))))
(defun exec-path-prepend (dir)
  "Prepend dir to exec-path after running it through expand-file-name"
  (setq exec-path (append (list (expand-file-name dir)) exec-path)))
(defun exec-path-append (dir)
  "Append dir to exec-path after running it through expand-file-name"
  (setq exec-path (append exec-path (list (expand-file-name dir)))))
(defun env-path-append (dir)
  "Append dir to the PATH envrionment variable"
  (let ((path-env (getenv "PATH"))
        (d (expand-file-name dir)))
    (setenv "PATH" (concat path-env ":" d))))
(defun env-path-prepend (dir)
  "Prepend dir to the PATH environment variable"
  (let ((path-env (getenv "PATH"))
        (d (expand-file-name dir)))
    (setenv "PATH" (concat d ":" path-env))))
;; Now, add our favorite paths
(and (string-match "XEmacs" emacs-version)
     (progn
       (load-path-prepend "~/emacs/lisp")
       (load-path-prepend "~/emacs/lisp/xemacs")
       ))
(and (not (string-match "XEmacs" emacs-version))
     (progn
       (load-path-prepend "~/emacs/lisp")
       (load-path-prepend "~/emacs/lisp/fsf")
       (load-path-append "/usr/share/emacs")
       (load-path-append "/usr/share/emacs/site-lisp")
       ))
(load-path-append "~/emacs/lisp/scala-mode")
(load-path-append "~/share/emacs/site-lisp/mu4e")
(setenv "EMACS" "t") ;; for child processes
;;;
;; Load stuff
;;;
; Every EMACS variant has its own subdir in my ~/emacs/lisp tree, e.g.
; ~/emacs/lisp/gnu for GNU EMACS.  Each of those dirs must have a
; non-portable.el in it, even if it's empty.  This file should define
; things that are not portable, but which the generic, portable stuff
; requires.  For instance, defining named keyboard macros works
; differently between XEmacs and GNU EMACS, so I do that in non-portable.el,
; but make use of the results in hacking.el (which is portable).
;
(require 'non-portable)
(load "generic-setup")                  ;Generic EMACS config fu
(load "stats")                          ;Statistics functions (outdated)
(load "hacking")                        ;Stuff to support hacking code
(load "writing")                        ;Stuff to support hacking words
(load "crypto")
(load "org-mode-setup")
(server-start)
(load "schizophrenia")                  ;Schizophrenic email setup
(message "[Welcome to EMACS, the One, True Editor]")
;;;; XXX The rest of the S-Exprs in this file are generated by
;;;; the emacs customization fu.  Perilous to edit by hand.
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(case-fold-search t)
 '(column-number-mode t)
 '(current-language-environment "English")
 '(display-time-mode nil)
 '(erc-modules (quote (autojoin button completion fill irccontrols list log match menu move-to-prompt netsplit networks noncommands readonly ring stamp track)))
 '(global-font-lock-mode t nil (font-lock))
 '(initial-buffer-choice t)
 '(initial-scratch-message ";; I'm just a bit of state
;;    sitting on the stack
;;   better say goodbye because I'm never coming back
;; I jumped into the cache
;;    riding a NOP sled
;;   pushed and pushed until I popped
;;  and landed on my head

")
 '(menu-bar-mode nil)
 '(safe-local-variable-values (quote ((js-indent-level . 4) (js-indent-level . 8) (javascript-indent-level . 8) (py-indent-offset . 4) (py-indent-offset . 2) (makefile-backslash-column . 70) (sgml-indent-step . 1) (makefile-backslash-column . 74) (makefile-backslash-column . 76) (adaptive-fill-mode) (sgml-basic-offset . 1) (javascript-indent-level . 4))))
 '(scroll-bar-mode nil)
 '(show-paren-mode t nil (paren))
 '(tool-bar-mode nil nil (tool-bar)))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "black" :foreground "green" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 120 :width normal :foundry "unknown" :family "Hermit"))))
 '(cperl-array-face ((((class color) (background dark)) (:foreground "yellow" :weight bold))))
 '(cperl-hash-face ((((class color) (background dark)) (:foreground "orange" :slant italic :weight bold))))
 '(custom-documentation ((t (:foreground "violet"))))
 '(custom-documentation-face ((t (:foreground "violet"))) t)
 '(default-face ((t (:foreground "green") (:background "black")) t))
 '(font-lock-comment-face ((((class color) (background dark)) (:foreground "#feabaa"))))
 '(font-lock-function-name-face ((((class color) (background dark)) (:foreground "khaki"))))
 '(font-lock-keyword-face ((((class color) (background dark)) (:foreground "orange"))))
 '(font-lock-string-face ((((class color) (background dark)) (:foreground "cyan"))))
 '(font-lock-variable-name-face ((((class color) (background dark)) (:foreground "goldenrod"))))
 '(menu ((((type x-toolkit)) nil)))
 '(mmm-comment-submode-face ((t (:foreground "skyblue"))))
 '(mmm-default-submode-face ((t (:foreground "green"))))
 '(mmm-special-submode-face ((t (:background "darkslategray" :foreground "maroon")))))
